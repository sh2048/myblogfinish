[
  {
    "slug": "from-read-to-remix",
    "title": "从“能看网页”到“能改网页”",
    "date": "2024-10-01",
    "category": "入门",
    "cover": "assets/blog1img.jpg",
    "excerpt": "在项目驱动下掌握HTML/CSS/JS，完成从阅读到拆解的能力跃迁。",
    "contentHtml": " <p>大多数同学刚开始接触 Web 前端时，心里的第一反应是：“我能上网、能看网页，不就够了吗？”——但如果停留在“看”，我们只是互联网的<strong>旁观者</strong>；而当我们学会“改”，就真正成为了互联网的<strong>建设者</strong>。</p>  <h2>第一步：从体验到拆解</h2>  <p>在课程初期，我们先用 WordPress 搭建一个个人博客。这一步骤不需要写一行代码，却能让学生马上拥有<strong>可见的作品</strong>：有首页、导航栏、文章页面，甚至还能留言互动。这就是“能看网页”的阶段。</p>  <p>接着，我们会把这些博客功能拆解：导航栏对应的是 HTML 的结构；文章排版对应的是 CSS 的样式；表单和交互对应的是 JavaScript 的逻辑。这样，学生就能明白：网页并不是魔法，而是由结构、表现、交互三层组合而成。</p>  <h2>第二步：从改颜色到改结构</h2>  <p>兴趣是最好的老师。相比于背诵语法，<strong>“改颜色、改字号”</strong>更能带来即时成就感——只要在 DevTools 里改一行 <code>background-color</code>，网页的气质立刻不同。这就是“能改网页”的起点。</p>  <p>随后我们逐步引导学生掌握更复杂的技能：用 Flexbox 改变布局，用 DOM 操作修改页面内容，用事件监听增加交互。通过一系列小实验，学生从最初的“能看懂”渐渐成长为“能修改”，再到“能创造”。</p>  <h2>第三步：从手动到 AI 协作</h2> <p>在 AI 时代，99% 的基础代码都可以交给 AI 生成，学生真正需要学习的，是如何清晰表达自己的<strong>需求</strong>，并判断 AI 给出的代码是否合理。因此，在教学中我们设计了 AI 协作任务：学生只需提出“我要让按钮点击后弹出提示”，AI 就会生成样例代码，学生再去调试、修改并理解逻辑。</p> <p>这样，学生学到的不仅是写代码，更是“写意图”的能力。</p>  <h2>第四步：从改网页到建网页</h2>  <p>当学生能熟练修改网页后，就会进入更高的层次——独立构建一个完整的前端项目。比如：个人名片页、社团招新页面，或者期末的博客作品展示。此时他们已经不再是“看客”，而是能用 HTML/CSS/JS 搭建属于自己的作品，并用 Lighthouse 等工具评测性能与可访问性。</p>  <h2>结语：学会用网页说话</h2>  <p>从“能看网页”到“能改网页”，不仅是一种技能的跨越，更是一种角色的转变。它让学生明白：<strong>网页是可以被掌控和创造的</strong>。在这个过程中，他们收获了项目化思维、表达与展示能力，以及 AI 协作的实践经验。</p>  <p>最终，每一位同学都能拥有一张自己的“数字名片”——一个会持续更新的个人博客，让学习不止于课堂，让作品为自己发声。</p>"
  },
  {
    "slug": "flexbox-and-box-model",
    "title": "Flexbox布局与盒模型调试",
    "date": "2024-11-12",
    "category": "布局",
    "cover": "assets/blog2img.jpg",
    "excerpt": "用开发者工具观察盒模型、熟练掌握Flex布局与常见排版套路。",
    "contentHtml": "<p><strong>这篇文章带你从 0 到 1 掌握 Flexbox 的基本用法，并学会用浏览器开发者工具（DevTools）调试“盒模型”（box model）。文中既提供<strong>原生 CSS</strong>的写法，也加入了你项目里已加载的 <code>Bootstrap 5</code> 实用类（如 <code>d-flex</code>、<code>gap-3</code>），两套方式都能跑通。</strong></p>\n\n<h2>一、为什么页面老是“挤不齐”？——从盒模型说起</h2>\n<p>网页里的每个元素都是一个“盒子”，由 <code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code> 四层组成。宽度如何计算，取决于 <code>box-sizing</code>：</p>\n<ul>\n  <li><code>content-box</code>（默认）：<code>width</code> 只包含内容区，不含内边距和边框。</li>\n  <li><code>border-box</code>：<code>width</code> 同时包含内容+内边距+边框（Bootstrap 已全局使用它，布局更稳定）。</li>\n</ul>\n<p>理解盒模型后，再学 Flexbox，你会更清楚“为什么盒子摆不齐”。</p>\n\n<h2>二、Flexbox 最小可用例子（MVP）</h2>\n<p>这是最常见的“三等分横排卡片”，原生 CSS 与 Bootstrap 两种写法：</p>\n<h3>原生 CSS</h3>\n<pre><code class=\"language-html\">&lt;div class=\"cards\"&gt;\n  &lt;div class=\"card\"&gt;A&lt;/div&gt;\n  &lt;div class=\"card\"&gt;B&lt;/div&gt;\n  &lt;div class=\"card\"&gt;C&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.cards {\n  display: flex;\n  gap: 16px;         /* 推荐用 gap 管理间距 */\n}\n.card {\n  flex: 1;           /* 均分可用空间 */\n  min-width: 0;      /* 关键：允许内容在容器内收缩，避免溢出 */\n  padding: 16px;\n  background: #f7f7f7;\n  border-radius: 8px;\n}\n</code></pre>\n\n<h3>Bootstrap 实用类</h3>\n<pre><code class=\"language-html\">&lt;div class=\"d-flex gap-3\"&gt;\n  &lt;div class=\"flex-fill p-3 bg-light rounded-3\"&gt;A&lt;/div&gt;\n  &lt;div class=\"flex-fill p-3 bg-light rounded-3\"&gt;B&lt;/div&gt;\n  &lt;div class=\"flex-fill p-3 bg-light rounded-3\"&gt;C&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p><code>flex-fill</code> 相当于 <code>flex: 1 1 auto</code>，<code>gap-3</code> 是 Bootstrap 的间距工具。</p>\n\n<h2>三、三种常见布局模式</h2>\n<h3>1）左右结构：侧栏 + 内容区</h3>\n<pre><code class=\"language-html\">&lt;div class=\"layout\"&gt;\n  &lt;aside class=\"sidebar\"&gt;侧栏&lt;/aside&gt;\n  &lt;main class=\"main\"&gt;主体内容&lt;/main&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.layout {\n  display: flex;\n  gap: 16px;\n}\n.sidebar {\n  width: 240px;          /* 固定侧栏 */\n  flex: 0 0 auto;\n}\n.main {\n  flex: 1 1 auto;        /* 主体自适应 */\n  min-width: 0;          /* 防止内容把容器撑爆 */\n}\n</code></pre>\n\n<h3>2）水平两端对齐（导航栏常用）</h3>\n<pre><code class=\"language-html\">&lt;nav class=\"d-flex justify-content-between align-items-center\"&gt;\n  &lt;div&gt;Logo&lt;/div&gt;\n  &lt;ul class=\"d-flex gap-3 list-unstyled m-0\"&gt;\n    &lt;li&gt;首页&lt;/li&gt;&lt;li&gt;文章&lt;/li&gt;&lt;li&gt;关于&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>\n\n<h3>3）可换行的卡片网格</h3>\n<pre><code class=\"language-html\">&lt;div class=\"cards-wrap\"&gt;\n  &lt;div class=\"card\"&gt;1&lt;/div&gt;&lt;div class=\"card\"&gt;2&lt;/div&gt;... \n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.cards-wrap {\n  display: flex;\n  flex-wrap: wrap;   /* 允许换行 */\n  gap: 16px;\n}\n.cards-wrap .card {\n  flex: 1 1 280px;   /* 每张卡片“理想宽度”280px，空间不足就换行 */\n}\n</code></pre>\n\n<h2>四、DevTools 调试：定位问题的最快方式</h2>\n<ol>\n  <li><strong>打开元素面板</strong>：在页面上右键“检查”（或 F12）→ 选择目标容器。</li>\n  <li><strong>查看 Flex 标记</strong>：在元素标签右侧会出现一个 <code>flex</code> 徽章，点击可弹出简易编辑器，直接调整 <code>justify-content</code>、<code>align-items</code>、<code>flex-direction</code> 等。</li>\n  <li><strong>看盒模型图</strong>：切到 <em>Computed</em> 面板底部的 Box Model，鼠标移到 margin/padding 可高亮对应区域，立刻发现“谁把间距变大了”。</li>\n  <li><strong>排查溢出</strong>：在可疑的子项上临时加一条样式 <code>outline: 1px solid;</code>，如果超出了容器，考虑给项目加 <code>min-width: 0</code> 或限制内容宽度（如图片 <code>max-width: 100%</code>）。</li>\n</ol>\n\n<h2>五、常见坑与快速修复</h2>\n<ul>\n  <li><strong>内容把行挤爆了</strong>：对子项加 <code>min-width: 0</code>，或者文本加 <code>overflow: hidden; text-overflow: ellipsis; white-space: nowrap;</code>。</li>\n  <li><strong>间距混乱</strong>：优先用 <code>gap</code> 管理内部间距，避免在每个子项上再叠 <code>margin</code>（易产生“最后一个也有间距”的问题）。</li>\n  <li><strong>卡片高度不齐</strong>：给卡片容器 <code>align-items: stretch</code> 或者为卡片内容设置一致的最小高度。</li>\n  <li><strong>图片撑破容器</strong>：图片样式加 <code>max-width: 100%; height: auto;</code>。</li>\n</ul>\n\n<h2>六、把它塞进你的博客</h2>\n<p>在你的项目里，已经通过 <code>core.css</code> 引入了 Bootstrap，并在 <code>#post-content</code> 上配置了段落样式（包含首行缩进）。你可以直接把本文作为某篇文章的 <code>contentHtml</code> 使用；喜欢“纯文本写作”的话，也可把同样内容写进 <code>contentText</code>，脚本会按空行自动切段。</p>\n\n<h2>七、练习（给自己 10 分钟）</h2>\n<p>把下面这段“有 bug 的布局”粘到你的演示页，思考为何第二个项目会溢出？你会怎么修？</p>\n<pre><code class=\"language-html\">&lt;div class=\"demo\"&gt;\n  &lt;div class=\"box\"&gt;短文本&lt;/div&gt;\n  &lt;div class=\"box\"&gt;一段很长很长很长很长很长的文本，不允许换行不允许换行不允许换行&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"language-css\">.demo { display: flex; gap: 12px; width: 360px; border: 1px dashed #ccc; padding: 8px; }\n.box  { flex: 1; background:#f8f9fa; padding:8px; white-space: nowrap; }\n</code></pre>\n<p><strong>提示</strong>：给子项加 <code>min-width: 0</code> 或允许文本换行；必要时限制文本宽度并加省略。</p>\n\n<h2>八、小抄（Checklist）</h2>\n<ul>\n  <li>容器：<code>display: flex</code>、<code>gap</code>、<code>flex-wrap</code>、<code>justify-content</code>、<code>align-items</code>。</li>\n  <li>子项：<code>flex: grow shrink basis</code>（如 <code>flex: 1 1 280px</code>）、<code>min-width: 0</code>。</li>\n  <li>盒模型：确认 <code>box-sizing: border-box</code>，用 Computed 面板看 padding/border/margin。</li>\n  <li>调试：点“flex”徽章调参数；用 <code>outline</code> 快速可视化边界。</li>\n</ul>\n\n<p>把 Flexbox 当“排列助手”，把盒模型当“尺子”。掌握这两件工具，你的页面就会既<strong>好看</strong>又<strong>可控</strong>。</p>"
  },
  {
    "slug": "demo-fifth-article",
    "title": "从有意思到有意义",
    "date": "2025-08-17",
    "category": "分享",
    "cover": "assets/blog3img.jpg",
    "excerpt": "分享个人搭建博客的体会。",
    "contentHtml": "<p><strong>从有意思到有意义</strong></p>\n<p>这几天，我一直在折腾一件“看上去很简单”的事情：搭建一个属于我自己的博客。起初，只是因为觉得新鲜好玩；没想到，随着过程的深入，它慢慢变成了一件让我愿意花时间、愿意深度思考的“有<strong>意义</strong>的事”。</p>\n<p><strong>一开始的“好玩”</strong></p>\n<p>刚接触 WordPress 的后台时，我感觉自己仿佛走进了一个游乐场。拖一个模块、切换一个组件、换一个布局，页面立刻焕然一新。那种即时反馈的快感，让我兴奋得像小时候拆玩具、拼积木。</p>\n<p>然而，新鲜感总会褪去。没过多久，我就陷入了“调来调去、拆了重来”的循环，渐渐有些厌烦。我开始怀疑：我为什么要搭博客？难道只是为了“好看”吗？</p>\n<p><strong>目标感的转折</strong></p>\n<p>就在这时，我停下来问自己：</p>\n<p>👉 这个博客究竟要做什么？</p>\n<p>👉 它能为我的工作和生活带来什么？</p>\n<p>慢慢地，我想明白了：</p>\n<p>它不仅仅是一个“个人展示墙”，更可以成为一个数字化教学入口。</p>\n<p>我希望它能：</p>\n<p>• 记录学生的学习过程与成长轨迹；</p>\n<p>• 展示作品，让努力被看见；</p>\n<p>• 让家长了解孩子的学习成果；</p>\n<p>• 呈现教学理念和课程设计；</p>\n<p>• 更重要的，是成为课堂之外的延伸，搭建起“教与学”的第二空间。</p>\n<p>当我意识到这一点，博客在我眼里立刻变了模样。</p>\n<p><strong>从“页面”到“逻辑”，我开始重新审视它的结构：</strong></p>\n<p>• 首页如何引导读者？</p>\n<p>• 分类怎样对应不同内容？</p>\n<p>• 文章如何兼顾记录与表达？</p>\n<p>我不再只是“堆积模块”，而是在搭建一套教学逻辑。页面布局有了依据，表达对象有了方向，写下的文字也不再是自言自语，而是面向具体的人和场景。那一刻，我感觉自己不是在建博客，而是在“设计一间线上教室”。</p>\n<p><strong>“有意思”到“有意义”的桥梁</strong></p>\n<p>回头看，这个过程并不是一蹴而就的：</p>\n<p>• 最初的好奇，是点燃火种；</p>\n<p>• 中途的挫折，是停下来思考的契机；</p>\n<p>•目标的清晰，则成为持续行动的支撑。</p>\n<p><strong>成长</strong>，往往就发生在这个转折点上——从“喜欢做”到“知道为什么做”。</p>\n<p><strong>小小的启发</strong></p>\n<p>搭博客的过程让我意识到：几乎每一件“有意思”的事，都可能孕育出“有<strong>意义</strong>”。区别只在于：你是否愿意在中途停下来，问问自己——我做这件事的<strong>目标</strong>是什么？它能带来什么<strong>价值</strong>？</p>\n<p>或许，下一次当你遇到一件觉得“挺好玩”的事，不妨坚持久一点，给它一个方向。说不定，它会带你走向一个更深、更广的世界。</p>"
  }
]